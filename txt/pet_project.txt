1. Про таблицу для каждого года - почитай про партиционирование. Таблицу лучше сделать одну.
2. Я бы сделал следующую структуру таблиц:
1. Категории
2. Таблица с расходами/доходами, где будет поле флаг, говорящий о том, расход это, или доход с m2m к категории
3. Хз что за раздел, возможно вынести тоже как категории в отдельную таблицу

Это. Я ещё подумал. Почитай что такое нормализация данных в базе, её 5 уровней и реши сам, какой уровень ты хочешь поддерживать



1. Пригласить людей на гитхаб
2. Раздать права.
3. Создать проект
Если хочешь поступить как взрослый дядька - создай организацию в терминах гитхаба, добавь туда людей и раздай им права. 
После научись работать в рамках projects, разберись как там всё работает. Создай проект в рамках организации. Дальше следуй github flow, а 
после во время pr добавляй меня как ревьюера

Используя систему @упоминаний GitHub
django-piston

manage.py запускает локальный сервер, миграции и создание файлов
__init__ дописываем характеристики, которые должны быть обработаны при запуске проекта
asgi - обеспечивает корректное подключение к серверу
wsgi - более старая версия asgi. С этими файлами мы не работаем. Настраиваем когда выгружаем на сервер.


setting - Описание всех глобальных настроек
Base_dir - полный путь к моему проекту
Secrett key - перед выгрузкой данных на сервер, лучше изменить его.
DEBUG - когда выгрузим сайт на сервер, поменять значение на False
ALLOWED_HOSTS - можно будет указать хосты, где мы можем опубликовать наш сайт.
INSTALLED_APPS - хранит список установленных приложений.
ROOT_URLCONF - указывается какой основной файл будет использоваться
TEMPLATES - какие шаблоны можем использовать
WSGI_APPLICATION - указывает на данный файл
DATABASES - указывается, с какой бд мы работаем
LANGUAGE_CODE = 'en-us' - язык для приложения
TIME_ZONE = 'UTC временная зона

urls - Отслеживание url адресов. По аналогии с роутингом в flask

Файлы startapp
папка migrations - необходимо описать структуру базы данных
admin - указываем какие таблицы должны отображаться в панели администратора.
apps - глобальные настройки конкректно для этого приложения
models - мы можем создать класс на основе которого будет создана таблица в бд
test - выполнение юниттестирование
views - отвечает за методы, которые будут выполнены при переходе пользователя на какую либо страницу
после создания приложения его необходимо зарегестрировать в INSTALLED_APPS